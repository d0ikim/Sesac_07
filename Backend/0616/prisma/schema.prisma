generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

// User 모델 정의
model Users { // 테이블 이름을 Users로 지정 (대부분의 경우 복수형)
  userId    Int      @id @default(autoincrement())
  email     String   @unique
  password  String   
  nickname  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInfo  UserInfos?

  // User와 Post의 1:N 관계 정의: 한 명의 사용자가 여러 개의 게시글을 작성할 수 있습니다.
  Posts     Posts[]   // Post 모델과의 관계 필드. 이 User에 연결된 모든 Post 레코드를 배열로 가집니다.

  @@map("Users") // 데이터베이스 테이블 이름을 'Users'로 매핑
}

model UserInfos {
  userInfoId   Int      @id @default(autoincrement())
  userId       Int      @unique
  name         String
  age          Int?
  gender       String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         Users    @relation(fields: [userId], references: [userId], onDelete:Cascade)
}

// Post 모델 정의
model Posts {
  postId    Int      @id @default(autoincrement())
  userId    Int      // 외래 키 (FK): User 모델의 userId를 참조
  title     String   
  content   String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post와 User의 관계 정의: 하나의 게시글은 한 명의 사용자에 의해 작성됩니다.
  // fields: [userId]는 현재 Post 모델의 userId 필드가 외래 키임을 나타냅니다.
  // references: [userId]는 Users 모델의 userId 필드를 참조함을 나타냅니다.
  User      Users    @relation(fields: [userId], references: [userId], onDelete:Cascade)

  @@map("Posts") // 데이터베이스 테이블 이름을 'Posts'로 매핑
}